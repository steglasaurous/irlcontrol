version: '3'

services:
  sls:
    build: ./docker/sls
    ports:
      - "30000:30000/udp"
      - "8181:8181/tcp"
    restart: always
    volumes:
      - sls_data:/data
      - ./docker/sls/sls.conf:/sls.conf

  noalbs:
    build: docker/noalbs
    volumes:
      - ./docker/noalbs/config.json:/config.json
    restart: always
    environment:
      - TWITCH_BOT_USERNAME=${TWITCH_BOT_USERNAME}
      - TWITCH_BOT_OAUTH=${TWITCH_BOT_OAUTH}
      - OBS_HOST=${OBS_HOST}
      - OBS_PASSWORD=${OBS_PASSWORD}
      - OBS_PORT=${OBS_PORT}
      - OBS_SCENE_NORMAL=${OBS_SCENE_NORMAL}
      - OBS_SCENE_LOW_BITRATE=${OBS_SCENE_LOW_BITRATE}
      - OBS_SCENE_OFFLINE=${OBS_SCENE_OFFLINE}

  irlcontrol:
    build: .
    volumes:
      - ./server/data:/server/data
    restart: always
    networks:
      - default
      - proxynet
    environment:
      - VIRTUAL_HOST=${SITE_VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${SITE_LETSENCRYPT_HOST}
      - LETSENCRYPT_EMAIL=${SITE_LETSENCRYPT_EMAIL}
      - TWITCH_USERNAME=${TWITCH_USERNAME}
      - RTIRL_PULL_KEY=${RTIRL_PULL_KEY}
      - TWITCH_APP_CLIENT_ID=${TWITCH_APP_CLIENT_ID}
      - TWITCH_APP_CLIENT_SECRET=${TWITCH_APP_CLIENT_SECRET}

    ports:
      - 3000


# Uncomment this for an SLS instance suited for an audio feedback channel.  You can use this to hear your stream back
# on your mobile device using an SRT player like Haivision Play Pro.
  slsaudio:
    image: b3ckontwitch/sls-b3ck-edit
    ports:
      - "30001:30001/udp"
      - "8182:8182/tcp"
    restart: always
    volumes:
      - sls_data_audio:/data
      - ./docker/sls/sls-audio.conf:/etc/sls/sls.conf

# If using a source that requires RTMP, uncomment this to build and start the RTMP server.
#  rtmp:
#    build: docker/rtmp
#    restart: unless-stopped
#    ports:
#      - 8090:8090
#      - 1935:1935

volumes:
  sls_data:
  sls_data_audio:
  sls_data_2:

networks:
  proxynet:
    name: nginx_proxy-tier
    external: true
